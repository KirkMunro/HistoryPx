<#############################################################################
HistoryPx uses proxy commands to add extended history information to
PowerShell. This includes the duration of a command, a flag indicating whether
a command was successful or not, the output generated by a command (limited to
a configurable maximum value), the error generated by a command, and the
actual number of objects returned as output and as error records.  HistoryPx
also adds a "__" variable to PowerShell that contains the output from the last
command, even if the last command did not generate any output.  Lastly,
HistoryPx includes commands to manage the memory footprint that is used by
extended history information.

Copyright 2014 Kirk Munro

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#############################################################################>

#region Initialize the module.

Invoke-Snippet -Name Module.Initialize

#endregion

#region Import helper (private) function definitions.

Invoke-Snippet -Name ScriptFile.Import -Parameters @{
    Path = Join-Path -Path $PSModuleRoot -ChildPath helpers
}

#endregion

#region Import public function definitions.

Invoke-Snippet -Name ScriptFile.Import -Parameters @{
    Path = Join-Path -Path $PSModuleRoot -ChildPath functions
}

#endregion

#region Export commands defined in nested modules.

. $PSModuleRoot\scripts\Export-BinaryModule.ps1

#endregion

#region Set the watermark to the hash code for the most recent error.

if ($global:Error.Count -gt 0) {
    [HistoryPx.ExtendedHistoryTable]::Watermark = $global:Error[0].GetHashCode()
}

#endregion

#region Define a global __ variable.

New-Variable -Name __ -Scope Global -Value $null -Description 'The output from the last command that was invoked.'

#endregion

#region Clean-up the module when it is removed.

$PSModule.OnRemove = {
    #region Clear the extended history table contents.

    [HistoryPx.ExtendedHistoryTable]::Clear()

    #endregion

    #region Remove the global __ variable.

    Remove-Variable -Name __ -Scope Global -Force

    #endregion
}

#endregion