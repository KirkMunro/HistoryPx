<#############################################################################
HistoryPx uses proxy commands to add extended history information to
PowerShell. This includes the duration of a command, a flag indicating whether
a command was successful or not, the output generated by a command (limited to
a configurable maximum value), the error generated by a command, and the
actual number of objects returned as output and as error records.  HistoryPx
also adds a "__" variable to PowerShell that captures the last output that you
may have wanted to capture, and includes commands to configure how it decides
when output should be captured.  Lastly, HistoryPx includes commands to manage
the memory footprint that is used by extended history information.

Copyright 2015 Kirk Munro

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
#############################################################################>

try {
    #region Initialize the module.

    Invoke-Snippet -Name Module.Initialize

    #endregion

    #region Import public function definitions.

    Invoke-Snippet -Name ScriptFile.Import -Parameters @{
        Path = Join-Path -Path $PSModuleRoot -ChildPath functions
    }

    #endregion

    #region Export commands defined in nested modules.

    . $PSModuleRoot\scripts\Export-BinaryModule.ps1

    #endregion

    #region Set the watermark to the hash code for the most recent error.

    if ($global:Error.Count -gt 0) {
        [HistoryPx.ExtendedHistoryTable]::Watermark = $global:Error[0].GetHashCode()
    }

    #endregion

    #region Generate a warning if the output configuration variable is already configured.

    $parentDefaultParameterValues = Get-Variable -Name PSDefaultParameterValues -Scope 1 -ValueOnly
    if ($parentDefaultParameterValues.Contains('Out-Default:OutVariable') -and
        ($parentDefaultParameterValues['Out-Default:OutVariable'] -eq [HistoryPx.CaptureOutputConfiguration]::VariableName)) {
        Write-Warning "$([HistoryPx.CaptureOutputConfiguration]::VariableName) is currently configured as the default OutVariable parameter for Out-Default. This configuration should be removed from PSDefaultParameterValues."
    }

    #endregion
} catch {
    throw
}

#region Clean-up the module when it is removed.

$PSModule.OnRemove = {
    try {
        #region Clear the extended history table contents.

        [HistoryPx.ExtendedHistoryTable]::Clear($true)

        #endregion

        #region Remove the global last captured output variable.

        Remove-Variable -Name ([HistoryPx.CaptureOutputConfiguration]::VariableName) -Scope Global -Force -ErrorAction Ignore

        #endregion
    } catch {
        throw
    }
}

#endregion
